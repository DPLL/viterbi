import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jgrapht.WeightedGraph;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleDirectedWeightedGraph;
 
public class Transcriber
{
    // UDP port number
    static final int port = 9999;
 
    public static void main(String[] args) throws IOException, InterruptedException 
    {
    	// Generate a random graph
    	SimpleDirectedWeightedGraph<Vertex, DefaultWeightedEdge> graph;
    	ArrayList<DefaultWeightedEdge> diameterPath = new ArrayList<DefaultWeightedEdge>();
		GraphGenerator graphGen = new GraphGenerator();
		graph = graphGen.GraphGen(0.5, 2, 5);
		System.out.println(graph.toString());
		
		diameterPath =graphGen.findDiameter();
		graphGen.setGourdTruth(diameterPath);
		
		//System.out.println(graph.edgeSet().size());

		// Graph Interface
		// verSet contains all the vertexes of the graph
        Set<Vertex> verSet = new HashSet<Vertex>();
        verSet.addAll(graph.vertexSet());
        
        // for states
        ArrayList<String> stateList = new ArrayList<String>();
        // for start_probability
        Hashtable<String, Float> start_probability = new Hashtable<String, Float>();
        float start_prob = (float)1/(verSet.size()); // start_prob is evenly distributed among all the states
        System.out.println("start_prob: " + start_prob + " verSet.size(): " + verSet.size());
        // for vocabularySet
        ArrayList<String> vocabularySetList = new ArrayList<String>();
        // for emission_probability
        Hashtable<String, Hashtable<String, Float>> emission_probability = 
        		new Hashtable<String, Hashtable<String, Float>>();
        float emission_prob = (float)1/(graphGen.wordPerNode);// emission_prob is evenly distributed among all the words for a node.
        System.out.println("emission_prob: " + emission_prob + " graphGen.wordPerNode: " + graphGen.wordPerNode);
        // for transition_probability
        Hashtable<String, Hashtable<String, Float>> transition_probability = 
        		new Hashtable<String, Hashtable<String, Float>>();
        
        for (Vertex ver : verSet) {
        	// print the current vertex
        	//System.out.println("The current vertex is: " + ver);
        	// words is the ArrayList form of wordList of this particular vertex. 
        	ArrayList<String> words = new ArrayList<String>(Arrays.asList(ver.wordList));
        	//System.out.println(words);
        	// outgoingEdges is the ArrayList form of the outgoing edges of this particular vertex.
        	Set<DefaultWeightedEdge> outgoingEdges = new HashSet<DefaultWeightedEdge>();
        	outgoingEdges.addAll(graph.outgoingEdgesOf(ver));
        	//System.out.println(outgoingEdges);
        	
        	// array of states
        	stateList.add(Integer.toString(ver.vertexID));
        	// start_probability
        	start_probability.put(Integer.toString(ver.vertexID), start_prob);
        	// vocabularySet and emission_probability
        	Hashtable<String, Float> e = new Hashtable<String, Float>();
        	for (String word : words) {
            	// vocabularySet
        		vocabularySetList.add(word);
        		// emission_probability
        		e.put(word, emission_prob);
        	}
        	// emission_probability
        	emission_probability.put(Integer.toString(ver.vertexID), e);
        	// transition_probability
        	float transition_prob = (float)1/(graph.outDegreeOf(ver));
        	//System.out.println("transition_prob: " + transition_prob + " graph.outDegreeOf(ver): " + graph.outDegreeOf(ver));
            Hashtable<String, Float> t = new Hashtable<String, Float>();
            for(DefaultWeightedEdge edge : outgoingEdges) {
            	t.put(Integer.toString(graph.getEdgeTarget(edge).vertexID), transition_prob);
            }
            transition_probability.put(Integer.toString(ver.vertexID), t);     
        }
        
        // print the states
        //System.out.println(stateList);
        String[] states = new String[stateList.size()];
        states = stateList.toArray(states);
        //System.out.println(Arrays.toString(states));
        // print the start_probability
        //System.out.println(start_probability);
        // print the vocabularySet
        //System.out.println(vocabularySetList);
        String[] vocabularySet = new String[vocabularySetList.size()];
        vocabularySet = vocabularySetList.toArray(vocabularySet);
        //System.out.println(Arrays.toString(vocabularySet));
        //System.out.println(vocabularySetList.size());
        // print the emission_probability
        //System.out.println(emission_probability);
        // print the transition_probability
        //System.out.println(transition_probability);
        
        // Based on the ground truth about the workflow, select corresponding audio file 
        System.out.println(graphGen.trueStates);
        System.out.println(graphGen.trueWords);
        
        ArrayList<String> asrResutls = new ArrayList<String>();
        
        for (String name: graphGen.trueWords) {
            String path = "/home/david/Dropbox/DCOSS14/wavs/" + name + ".wav";
            //System.out.println(path);
            File f = new File(path);
            if (!f.exists()) {
            	System.out.println("File not found!");
            	System.exit(-1);
            }
            // call shell command to run Sphinx           
            String cmd = "java -jar /home/david/Downloads/sphinx4-1.0beta6/bin/LatticeDemo.jar " + path;
            System.out.println(cmd);
            Process p;
            StringBuffer output = new StringBuffer();
            
            try {
            	p = Runtime.getRuntime().exec(cmd);
            	p.waitFor();
 
		        BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));	        
		        BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
		        // read the output from the command
	            System.out.println("Here is the standard output of the command:\n");
	            String s = null;
	            while ((s = stdInput.readLine()) != null) {
	            	//System.out.println(s);
	            	output.append(s + "\n");
	            }
	            // read any errors from the attempted command
	            //System.out.println("Here is the standard error of the command (if any):\n");
	            //while ((s = stdError.readLine()) != null) {
	            //    System.out.println(s);
	            //}
            } catch (Exception e) {
            	e.printStackTrace();
            }            
            System.out.println(output.toString());
            // Manipulate the output and get the contents after 'I heard: '
            String pattern = "(I heard: )([\\w ']+)";
            Pattern r = Pattern.compile(pattern);
            Matcher m = r.matcher(output);
            if(m.find()) {
            	System.out.println("The matching is: " + m.group(2));
            } else {
            	System.out.println("ASR does not output anything!");
            }
        }
        
        
		//confusion_probability
        /*
        // Hardcode confusion_probability
		Hashtable<String, Hashtable<String, Float>> confusion_probability = 
			new Hashtable<String, Hashtable<String, Float>>();
		Hashtable<String, Float> c1 = new Hashtable<String, Float>();
		c1.put(CUT, 0.0f);
		c1.put(HAT, (1.0f/3.0f));
		c1.put(MAD, (2.0f/3.0f));
		Hashtable<String, Float> c2 = new Hashtable<String, Float>();
		c2.put(CUT, (1.0f/3.0f));
		c2.put(HAT, (2.0f/3.0f));
		c2.put(MAD, 0.0f);
		Hashtable<String, Float> c3 = new Hashtable<String, Float>();
		c3.put(CUT, (2.0f/3.0f));
		c3.put(HAT, (2.0f/3.0f));
		c3.put(MAD, (1.0f/3.0f));
		confusion_probability.put(MAC, c1);
		confusion_probability.put(HIT, c2);
		confusion_probability.put(CAT, c3);*/

        
/*        Hashtable<String, Hashtable<String, Float>> confusion_probability =
        		confustionGen(actualVocabularySet, vocabularySet);*/
/*
        System.out.println("LD is " + computeLevenshteinDistance("0ksIdZ@n", "0pS@n"));*/
        
        /*
        ArrayList<String> strArr = new ArrayList<String>(); 
        
		DatagramSocket serverSocket = new DatagramSocket(port);
        System.out.println("In the UDPserver");
        
        while(true)
        {
	        byte[] receiveData = new byte[256];
	        //byte[] sendData = new byte[256];
	    	DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
	    	serverSocket.receive(receivePacket);
	        //String revStr = new String(receivePacket.getData());
	    	
	    	//Notice that receivePacket.getData() is 256 and receivePacket.getLength() is the actual length
	    	String revStr = new String(receiveData, 0, receivePacket.getLength());
	        //System.out.println("receivePacket.getLength(): " + receivePacket.getLength());
	        //System.out.println("revStr.length(): " + revStr.length());
	        System.out.println("RECEIVED: " + revStr);
	        
	        if(revStr.equals("over"))
	        		break;
	
	        strArr.add(revStr);
	        
        	//System.out.println("strArr.size() is " + strArr.size());
	        String[] actualVocSet = strArr.toArray(new String[strArr.size()]);
	        //System.out.println(Arrays.toString(actualVocSet));
	        
	        
	        Hashtable<String, Hashtable<String, Float>> confusion_probability =
	        		confustionGen(actualVocSet, vocabularySet);
	        
	        forward_viterbi(actualVocSet,
	        		vocabularySet, states,
	                start_probability,
	                transition_probability,
	                emission_probability,
	                confusion_probability);
	        
        }
        serverSocket.close();
	        */
/*        
        forward_viterbi(actualVocabularySet,
        		vocabularySet, states,
                start_probability,
                transition_probability,
                emission_probability,
                confusion_probability);*/
        }
 
        public static void forward_viterbi(String[] actualObs, String[] obs, String[] states,
                        Hashtable<String, Float> start_p,
                        Hashtable<String, Hashtable<String, Float>> trans_p,
                        Hashtable<String, Hashtable<String, Float>> emit_p,
			Hashtable<String, Hashtable<String, Float>> conf_p)
        {

        	int state_num = states.length;
        	//int obs_num = obs.length;
        	int obs_num = actualObs.length;
        	//V[t][i] stores the overall largest probability ending at the state of i at time t
        	float V[][] = new float[obs_num+1][state_num];
        	//B[t][i]  stores the last source state corresponding to the V[t][i]
        	int B[][] = new int[obs_num+1][state_num];
        	//X[t][i] stores the word that has been chosen corresponding to the V[t][i]
        	String X[][] = new String[obs_num+1][state_num];
		
        	int m = 0;
        	for (String state : states)
        	{
        		V[0][m] = start_p.get(state);
        		B[0][m] = m;
        		X[0][m] = "@";
        		m++;
        	}

        	// t is the records the current time
        	int t = 0;
            for (String input : actualObs)
            {
            	// input is the current actual observation
            	t++;
            	// i is the current state
            	int i = -1;
                for (String next_state : states)
                {
                	i++;
                    int Smax = -1;
                    float Pmax = 0;
                    String v_word = "";	

                    float v_prob = 1;       
			
                    // x is the current accurate observation (word)	
                    int x = -1;
                    for (String word : obs)		
                    {
                    	x++;
                    	// j is the previous state
                    	int j = -1; 
                    	for (String source_state : states)
                    	{
                    		j++;
                    		float p;
                    		if(emit_p.get(next_state) == null || trans_p.get(source_state) == null ||
                    				emit_p.get(next_state).get(word) == null || trans_p.get(source_state).get(next_state) == null)
                    			p = 0;
                    		else
	                    		p = emit_p.get(next_state).get(word) * 
	                    				trans_p.get(source_state).get(next_state) * conf_p.get(input).get(word);
                    		v_prob = V[t-1][j] * p;
						
                    		if (v_prob >= Pmax)
                    		{
                    			Pmax = v_prob;
                    			Smax = j;
                    			v_word = word;
                    		}
                    	}
                    }
                    V[t][i] = Pmax;
                    B[t][i] = Smax;
                    X[t][i] = v_word;
                }
            }
 
            float total = 0;
            String argmax = "";
            float valmax = 0;
 
            float prob;
            String v_path;
            float v_prob;
	
            /*
            for (int n = 0; n < obs_num+1; n++)
            	for (int z = 0; z < state_num; z++)
            		System.out.println(V[n][z]);
            for (int n = 0; n < obs_num+1; n++)
            	for (int z = 0; z < state_num; z++)
            		System.out.println(B[n][z]);
            for (int n = 0; n < obs_num+1; n++) 
            	for (int z = 0; z < state_num; z++)
            		System.out.println(X[n][z]);
			*/
		
            int Smax = -1;
            float pMax = 0;
            for (int n = 0; n < state_num; n++ ) 
            {
            	if (V[obs_num][n] >= pMax) {
            		pMax = V[obs_num][n];
            		Smax = n;
            	}
            }

            // If at the current stage, the output of ASR is too far-away from the vocabulary set,
            // it needs special handling.
            int path[] = new int[obs_num + 1];
            String words[] = new String[obs_num + 1];
            
            path[obs_num]  = Smax;
            words[obs_num] = X[obs_num][Smax];
            for (int x = obs_num-1; x >= 0; x--)
            {
            	path[x] = B[x+1][path[x+1]];
            	words[x] = X[x][path[x]]; 
            }

            	
            System.out.println("\n*************************************\n");         
            System.out.println(Arrays.toString(actualObs));
            
            for (int x = 0; x < obs_num+1; x++)
            {
            	System.out.println("state: " + path[x] + 
            			", with the word: " + words[x]);
            }
            System.out.println("\n*************************************\n");
        }
        
		// convolution_index calculates the overlapping similarity of two strings
		// Notice that p_src is the string in the vocabulariy set, and p_dest is the
		// the actual string that is heard.
		public static float convolution_index(String p_src, String p_dest)
    	{
		    int len_src = p_src.length();
		    int len_dest = p_dest.length();
		    int steps = 2*len_src + len_dest;
		    int i,c;
		    float retval = 0;
	   
		    for(i=0; i<steps; ++i) {
		        int cur_conv_index = 0;
		        int start_s = Math.max(0, (len_src - 1 - i));
		        int start_d = Math.max(0, i - len_src + 1);
		        while(start_s < len_src && start_d < len_dest) {
		            //System.out.println(p_src.substring(start_s,start_s+1) + " == " + p_dest.substring(start_d,start_d+1));
		            if(p_src.substring(start_s,start_s+1).equals(p_dest.substring(start_d,start_d+1))) {
		                ++cur_conv_index;
		            }
		            ++start_s;
		            ++start_d;
		        }
		        if(cur_conv_index > retval)
		            retval = cur_conv_index;
		    }
			System.out.println("The convolution index value between " + p_src + " and " + p_dest + " is " + retval);
		    return retval/len_dest;       
		}
        
        
        public static Hashtable<String, Hashtable<String, Float>> 
        	confustionGen(String[] obs, String[] vocalbularySet) throws IOException, InterruptedException
        {
        	/*
        	 * convert the word sequence into phonetic sequence by calling eSpeak.
        	 */        	
        	//.out.println(Arrays.toString(obs));
        	//System.out.println(Arrays.toString(vocalbularySet));
        	String[] obsPhonemes;
        	//String[] obsPhonemes = {"anju:@L d'arEl", "m'eIbi: l'eIt3"};
        	String[] vocalPhonemes;
        	
        	obsPhonemes = phonemeConversion(obs);
        	
        	vocalPhonemes = phonemeConversion(vocalbularySet);        	
        	
/*        	for (String temp : obsPhonemes)
        		System.out.println(temp);
        	
        	for (String temp : vocalPhonemes)
        		System.out.println(temp);
        	*/
        	  
        	/*
        	 * calculate the Levenshtein distance and generate the corresponding confusion matrix.
        	 */
        	//System.out.println("computeLevenshteinDistance mac and mad "  + computeLevenshteinDistance(obsPhonemes[0], vocalPhonemes[0]));
        	
        	/*
    		Hashtable<String, Float> c3 = new Hashtable<String, Float>();
    		c3.put(CUT, (2.0f/3.0f));
    		c3.put(HAT, (2.0f/3.0f));
    		c3.put(MAD, (1.0f/3.0f));
    		confusion_probability.put(MAC, c1);*/
        	
        	int i = 0;
        	int j;
    		Hashtable<String, Hashtable<String, Float>> confusion_probability = 
    				new Hashtable<String, Hashtable<String, Float>>();
        	for (String obsWord : obs) {
        		Hashtable<String, Float> c = new Hashtable<String, Float>();
        		// get rid of the utility 'phonemes'
    			String obsPhoneme = obsPhonemes[i].replaceAll("[',%=_:|]", "");
        		j = 0;
        		for (String volWord : vocalbularySet) {
        			float similarityIndex;
        			// get rid of the utility 'phonemes'
        			String vocalPhoneme = vocalPhonemes[j].replaceAll("[',%=_:|]", "");
        			int LDistance = computeLevenshteinDistance(obsPhoneme, vocalPhoneme);
        			//int wordLength = obsWord.length();
        			//int wordLength = obsPhonemes[i].length();
        			int wordLength = obsPhoneme.length();
        			//System.out.println("vocal " + vocalPhonemes[j] + 
        			//		" LDistance " + LDistance + " wordLength " + wordLength);
        			similarityIndex = ( LDistance <= wordLength ? (1 - ((float)LDistance/wordLength)) : 0);
					// --------------------------------------------------------
					// Modified for adding convolution index
					float conv = convolution_index(vocalPhoneme, obsPhoneme);
					similarityIndex *= conv;
					// --------------------------------------------------------
        			c.put(volWord, similarityIndex);
        			j++;
        		}
        		confusion_probability.put(obsWord, c);
        		i++;
        	}
        	
        	//System.out.println("Hi, I am here");
        	
        	Enumeration<String> names;	
            names = confusion_probability.keys();
            while(names.hasMoreElements()) {
               String str = (String) names.nextElement();
               System.out.println(str + ": " +
            		   confusion_probability.get(str));
            }
        	
			return confusion_probability;
        }
        
    	public static String[] phonemeConversion(String[] str) throws IOException, InterruptedException
    	{
        	Process p;
        	String speakCall = "speak -x ";
        	String line;
        	int i = 0;
        	
        	String[] phenemeArr = new String[str.length];
        	String command;
    		
        	for (String word : str)
        	{
        		// Probably because of the bug in speak package, it cannot return desired results.
        		String[] subWords = word.split(" ");
        		StringBuilder out = new StringBuilder();
        		int j = 0;
        		for (String subWord : subWords)
        		{
        			j++;
	        		command = speakCall + subWord;
	        		p = Runtime.getRuntime().exec(command);
	            	p.waitFor();
	            	
	            	BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
	            	
	            	// return the subString(1) because of the fact that espeak adds a space at the beginning
	            	//line = reader.readLine().substring(1);
	            	
	            	if ((line = reader.readLine()) != null)
	            	{
	            		//System.out.println(line);
	            		if (j == 1)
	            			out.append(line.substring(1));
	            		else
	            			out.append(" ").append(line.substring(1));
	            	}
	            	phenemeArr[i] = out.toString();
        		}
            	/*
            	StringBuilder out = new StringBuilder();
                String curr = null, previous = null;
                while ((curr = reader.readLine()) != null)
                {
                    if (!curr.equals(previous)) {
                        previous = curr;
                        out.append(curr).append('\n');
                        //System.out.println(curr);
                        phenemeArr[i] = out;
                    }
                }*/           	
            	i++;
        	}
        	
			return phenemeArr;	
    	}
    	
        private static int minimum(int a, int b, int c) {
            return Math.min(Math.min(a, b), c);
        }

        public static int computeLevenshteinDistance(String str1,String str2) {
            int[][] distance = new int[str1.length() + 1][str2.length() + 1];

            for (int i = 0; i <= str1.length(); i++)
            	distance[i][0] = i;
            for (int j = 1; j <= str2.length(); j++)
                distance[0][j] = j;

            for (int i = 1; i <= str1.length(); i++)
                for (int j = 1; j <= str2.length(); j++)
                    distance[i][j] = minimum(
                    		distance[i - 1][j] + 1,
                            distance[i][j - 1] + 1,
                            // TODO change the weight of substuting one character of the word to 2
                            //distance[i - 1][j - 1]+ ((str1.charAt(i - 1) == str2.charAt(j - 1)) ? 0 : 2));
                            distance[i - 1][j - 1]+ ((str1.charAt(i - 1) == str2.charAt(j - 1)) ? 0 : 1));

            return distance[str1.length()][str2.length()];    
        }
}

