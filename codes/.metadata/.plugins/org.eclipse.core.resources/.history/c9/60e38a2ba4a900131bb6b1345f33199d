import java.util.ArrayList;
import java.util.Set;

import org.jgrapht.DirectedGraph;
import org.jgrapht.graph.AbstractBaseGraph;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleDirectedGraph;


public class TraversalTest {
	AbstractBaseGraph<VertexSimulation, DefaultWeightedEdge> randomGraph;
	
	/*
	 * Find the first path with depth l
	 */
	public boolean DFS(int depth, VertexSimulation v, ArrayList<VertexSimulation> path) 
	{
		if (v == null)
			return false;
		if (depth == 0) {
			System.out.println(path);
			return true;
		}
		
		Set<DefaultWeightedEdge> outgoingEdges;
		outgoingEdges = randomGraph.outgoingEdgesOf(v);
		for (DefaultWeightedEdge e: outgoingEdges) {
			VertexSimulation ver = randomGraph.getEdgeTarget(e);
			path.add(ver);
			if (DFS(depth-1, ver, path))
				break;
			int size = path.size();
			path.remove(size-1);
		}
		
		return false;
	}
	
	public ArrayList<VertexSimulation> findPath(int pathLength)
	{
		Set<VertexSimulation> vertexSet = randomGraph.vertexSet();
		ArrayList<VertexSimulation> path;
		for (VertexSimulation v : vertexSet) {
			path = new ArrayList<VertexSimulation>();
			if (DFS(pathLength, v, path))
				return path;
		}
		return null;
	}
	
	public static void main(String[] args) {
		DirectedGraph<String,String> g = new SimpleDirectedGraph<String, String>(String.class);
		
		
		
		g.addVertex("A");
		g.addVertex("B");
		g.addVertex("C");
		g.addVertex("D");
		
		
		g.addEdge("A", "B", "e1");
		g.addEdge("A", "C", "e2");
		g.addEdge("C", "D", "e3");
		
	}

}
